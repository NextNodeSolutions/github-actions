name: 'TypeScript Type Check'
description: 'Atomic action to run TypeScript type checking'
inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  command:
    description: 'Type check command'
    required: false
    default: 'type-check'
  tsconfig-path:
    description: 'Path to tsconfig.json'
    required: false
    default: 'tsconfig.json'
  strict:
    description: 'Enforce strict mode'
    required: false
    default: 'true'

outputs:
  errors:
    description: 'Number of type errors'
    value: ${{ steps.typecheck.outputs.errors }}
  warnings:
    description: 'Number of warnings'
    value: ${{ steps.typecheck.outputs.warnings }}
  duration:
    description: 'Time taken'
    value: ${{ steps.typecheck.outputs.duration }}

runs:
  using: 'composite'
  steps:
    - name: Setup
      shell: bash
      run: |
        echo "::group::üìù TypeScript Type Check Setup"
        echo "‚Ä¢ Working directory: ${{ inputs.working-directory }}"
        echo "‚Ä¢ Command: pnpm ${{ inputs.command }}"
        echo "‚Ä¢ Config: ${{ inputs.tsconfig-path }}"
        echo "‚Ä¢ Strict mode: ${{ inputs.strict }}"
        echo "::endgroup::"

    - name: Verify TypeScript config
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üîç Verifying TypeScript Configuration"
        
        # Check if tsconfig exists
        if [[ -f "${{ inputs.tsconfig-path }}" ]]; then
          echo "‚úÖ Found ${{ inputs.tsconfig-path }}"
          
          # Check strict mode setting
          if [[ "${{ inputs.strict }}" == "true" ]]; then
            if grep -q '"strict":\s*true' "${{ inputs.tsconfig-path }}"; then
              echo "‚úÖ Strict mode is enabled"
            else
              echo "‚ö†Ô∏è Strict mode is not enabled in tsconfig"
            fi
          fi
          
          # Show compiler options
          echo "‚Ä¢ Compiler options:"
          grep -A 10 '"compilerOptions"' "${{ inputs.tsconfig-path }}" | head -15 || true
        else
          echo "‚ùå TypeScript config not found at ${{ inputs.tsconfig-path }}"
          exit 1
        fi
        
        echo "::endgroup::"

    - name: Run type check
      id: typecheck
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üîß Running Type Check"
        
        START_TIME=$(date +%s)
        
        # Run type check and capture output
        echo "‚Ä¢ Executing: pnpm ${{ inputs.command }}"
        
        # Create temp file for output
        OUTPUT_FILE=$(mktemp)
        
        # Run command and capture output
        if pnpm ${{ inputs.command }} 2>&1 | tee "$OUTPUT_FILE"; then
          CHECK_STATUS="success"
          echo "‚úÖ Type check passed"
        else
          CHECK_STATUS="failed"
          echo "‚ùå Type check failed"
        fi
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        # Count errors and warnings
        ERROR_COUNT=$(grep -c "error TS" "$OUTPUT_FILE" 2>/dev/null || echo "0")
        WARNING_COUNT=$(grep -c "warning" "$OUTPUT_FILE" 2>/dev/null || echo "0")
        
        echo "‚Ä¢ Errors found: $ERROR_COUNT"
        echo "‚Ä¢ Warnings found: $WARNING_COUNT"
        echo "‚Ä¢ Duration: ${DURATION}s"
        
        echo "errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
        
        # Clean up
        rm -f "$OUTPUT_FILE"
        
        echo "::endgroup::"
        
        # Fail if errors found
        if [[ "$CHECK_STATUS" == "failed" ]]; then
          exit 1
        fi

    - name: Type check summary
      if: always()
      shell: bash
      run: |
        echo "::group::üìä Type Check Summary"
        echo "‚Ä¢ Errors: ${{ steps.typecheck.outputs.errors }}"
        echo "‚Ä¢ Warnings: ${{ steps.typecheck.outputs.warnings }}"
        echo "‚Ä¢ Duration: ${{ steps.typecheck.outputs.duration }}"
        
        if [[ "${{ steps.typecheck.outputs.errors }}" == "0" ]]; then
          echo "‚úÖ No type errors found"
        else
          echo "‚ùå Fix ${{ steps.typecheck.outputs.errors }} type error(s) before proceeding"
        fi
        
        echo "::endgroup::"
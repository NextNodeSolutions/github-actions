name: 'Railway Deploy'
description: 'Deploy application to Railway platform'
author: 'NextNodeSolutions'

inputs:
  environment:
    description: 'Deployment environment'
    required: true
  app-name:
    description: 'Application name'
    required: true
  memory-mb:
    description: 'Memory allocation in MB'
    required: false
    default: '512'
  variables:
    description: 'Environment variables as JSON object'
    required: false
    default: '{}'
  wait-for-deployment:
    description: 'Wait for deployment to complete'
    required: false
    default: 'true'
  timeout-seconds:
    description: 'Deployment timeout in seconds'
    required: false
    default: '300'
  railway-token:
    description: 'Railway API token'
    required: true

outputs:
  deployment-id:
    description: 'Railway deployment ID'
    value: ${{ steps.deploy.outputs.id }}
  railway-url:
    description: 'Railway internal URL'
    value: ${{ steps.deploy.outputs.url }}
  status:
    description: 'Deployment status'
    value: ${{ steps.wait.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Install Railway CLI
      shell: bash
      run: npm install -g @railway/cli@latest
      
    - name: Configure Railway environment
      shell: bash
      env:
        RAILWAY_TOKEN: ${{ inputs.railway-token }}
      run: |
        railway environment ${{ inputs.environment }}
        
    - name: Set Railway variables
      shell: bash
      env:
        RAILWAY_TOKEN: ${{ inputs.railway-token }}
      run: |
        # Set base variables
        railway variables set NODE_ENV=${{ inputs.environment }}
        railway variables set MEMORY_MB=${{ inputs.memory-mb }}
        
        # Set custom variables if provided
        if [[ '${{ inputs.variables }}' != '{}' ]]; then
          echo '${{ inputs.variables }}' | jq -r 'to_entries[] | "railway variables set \(.key)=\(.value)"' | bash
        fi
        
    - name: Deploy to Railway
      id: deploy
      shell: bash
      env:
        RAILWAY_TOKEN: ${{ inputs.railway-token }}
      run: |
        # Deploy with detached mode
        DEPLOY_OUTPUT=$(railway up --detach 2>&1)
        echo "$DEPLOY_OUTPUT"
        
        # Extract deployment ID
        DEPLOYMENT_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP 'Deployment ID: \K[a-z0-9-]+' || echo "unknown")
        echo "id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        
        # Get Railway URL
        RAILWAY_URL=$(railway domain 2>/dev/null || echo "")
        echo "url=$RAILWAY_URL" >> $GITHUB_OUTPUT
        
    - name: Wait for deployment
      id: wait
      if: inputs.wait-for-deployment == 'true'
      shell: bash
      env:
        RAILWAY_TOKEN: ${{ inputs.railway-token }}
      run: |
        MAX_WAIT=${{ inputs.timeout-seconds }}
        ELAPSED=0
        INTERVAL=10
        
        echo "Waiting for deployment to become active..."
        while [ $ELAPSED -lt $MAX_WAIT ]; do
          if railway status 2>/dev/null | grep -q "ACTIVE"; then
            echo "Deployment is active!"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Still waiting... ($ELAPSED/$MAX_WAIT seconds)"
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        
        echo "Deployment timeout after $MAX_WAIT seconds"
        echo "status=timeout" >> $GITHUB_OUTPUT
        exit 1
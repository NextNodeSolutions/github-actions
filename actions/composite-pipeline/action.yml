name: 'Composite Pipeline'
description: 'All-in-one pipeline combining setup and quality checks'
inputs:
  # Environment Setup
  node-version:
    description: 'Node.js version'
    required: false
    default: '20'
  pnpm-version:
    description: 'PNPM version'
    required: false
    default: '10.11.0'
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  
  # Quality Checks
  commands:
    description: 'JSON array of commands to run (e.g., ["lint", "type-check", "test", "build"])'
    required: false
    default: '["lint", "type-check", "test"]'
  
  # Security
  audit-level:
    description: 'Minimum severity for audit failures'
    required: false
    default: 'high'
  skip-audit:
    description: 'Skip security audit'
    required: false
    default: 'false'

outputs:
  status:
    description: 'Pipeline execution status'
    value: ${{ steps.pipeline.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Setup Environment
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'
        cache-dependency-path: ${{ inputs.working-directory }}/pnpm-lock.yaml
    
    - name: Install Dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm install --frozen-lockfile
    
    - name: Security Audit
      if: inputs.skip-audit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm audit --audit-level ${{ inputs.audit-level }} || true
    
    - name: Run Pipeline
      id: pipeline
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -e
        commands='${{ inputs.commands }}'
        
        # Parse JSON array of commands
        for cmd in $(echo "$commands" | jq -r '.[]'); do
          echo "::group::Running pnpm $cmd"
          pnpm $cmd
          echo "::endgroup::"
        done
        
        echo "status=success" >> $GITHUB_OUTPUT
name: 'Railway Domain Setup'
description: 'Configure custom domain on Railway service'
inputs:
  service-name:
    description: 'Railway service name'
    required: true
  custom-domain:
    description: 'Custom domain to configure'
    required: true
  railway-token:
    description: 'Railway API token'
    required: true
  remove-existing:
    description: 'Remove existing custom domains first (Railway plan limit workaround)'
    required: false
    default: 'true'

outputs:
  domain-configured:
    description: 'Whether domain was successfully configured'
    value: ${{ steps.configure.outputs.configured }}
  cname-target:
    description: 'CNAME target from Railway for DNS configuration'
    value: ${{ steps.configure.outputs.cname-target }}
  railway-url:
    description: 'Final Railway URL with custom domain'
    value: ${{ steps.configure.outputs.railway-url }}

runs:
  using: 'composite'
  steps:
    - name: Configure Custom Domain
      id: configure
      shell: bash
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true
      run: |
        echo "::group::🌐 Configuring Railway Custom Domain"
        
        SERVICE_NAME="${{ inputs.service-name }}"
        CUSTOM_DOMAIN="${{ inputs.custom-domain }}"
        REMOVE_EXISTING="${{ inputs.remove-existing }}"
        
        echo "• Service: $SERVICE_NAME"
        echo "• Domain: $CUSTOM_DOMAIN"
        echo "• Remove existing: $REMOVE_EXISTING"
        echo ""
        
        # JQ selector for reuse
        JQ_SERVICE_SELECTOR='.services.edges[] | .node | select(.name=="'"$SERVICE_NAME"'")'
        
        # Remove existing custom domains if requested (Railway plan limit workaround)
        if [[ "$REMOVE_EXISTING" == "true" ]]; then
          echo "🔍 Checking for existing custom domains..."
          
          # Get current service domains
          ALL_CUSTOM_DOMAINS=$(railway status --json 2>/dev/null | jq -r "$JQ_SERVICE_SELECTOR | .serviceInstances.edges[].node.domains.customDomains[]?" 2>/dev/null || echo "")
          
          if [[ -n "$ALL_CUSTOM_DOMAINS" ]]; then
            echo "🗑️  Found existing custom domains, removing them first..."
            echo "$ALL_CUSTOM_DOMAINS" | jq -r '.id' | while read -r DOMAIN_ID; do
              if [[ -n "$DOMAIN_ID" && "$DOMAIN_ID" != "null" ]]; then
                echo "  • Deleting domain: $DOMAIN_ID"
                curl -s -X POST "https://backboard.railway.app/graphql/v2" \
                  -H "Authorization: Bearer ${{ inputs.railway-token }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"query\":\"mutation { customDomainDelete(id: \\\"$DOMAIN_ID\\\") }\"}" > /dev/null
                sleep 2  # Wait for deletion to propagate
              fi
            done
            echo "✅ Existing custom domains removed"
          else
            echo "✅ No existing custom domains found"
          fi
        fi
        
        echo ""
        echo "🔧 Configuring Railway custom domain: $CUSTOM_DOMAIN"
        
        # Configure custom domain on Railway
        DOMAIN_OUTPUT=$(railway domain "$CUSTOM_DOMAIN" --service "$SERVICE_NAME" --json 2>/dev/null || echo "{}")
        
        if [[ "$DOMAIN_OUTPUT" != "{}" ]]; then
          echo "✅ Railway custom domain configured!"
          
          # Extract CNAME target from Railway response
          CNAME_TARGET=$(echo "$DOMAIN_OUTPUT" | jq -r '.customDomainCreate.status.dnsRecords[] | select(.recordType=="DNS_RECORD_TYPE_CNAME") | .requiredValue' 2>/dev/null || echo "")
          
          # Try fallback extraction for different API response formats
          if [[ -z "$CNAME_TARGET" ]]; then
            CNAME_TARGET=$(echo "$DOMAIN_OUTPUT" | jq -r '.dnsRecords[] | select(.type=="CNAME") | .value // empty' 2>/dev/null || echo "")
          fi
          
          # Try another fallback pattern
          if [[ -z "$CNAME_TARGET" ]]; then
            CNAME_TARGET=$(echo "$DOMAIN_OUTPUT" | jq -r '.status.dnsRecords[] | select(.recordType=="DNS_RECORD_TYPE_CNAME") | .requiredValue' 2>/dev/null || echo "")
          fi
          
          if [[ -n "$CNAME_TARGET" ]]; then
            echo "🔍 CNAME target: $CNAME_TARGET"
            echo "cname-target=$CNAME_TARGET" >> $GITHUB_OUTPUT
          else
            echo "⚠️  No CNAME target found in Railway response"
            echo "📋 Debug: Railway response:"
            echo "$DOMAIN_OUTPUT" | jq '.' || echo "$DOMAIN_OUTPUT"
          fi
          
          # Set success outputs
          RAILWAY_URL="https://$CUSTOM_DOMAIN"
          echo "railway-url=$RAILWAY_URL" >> $GITHUB_OUTPUT
          echo "configured=true" >> $GITHUB_OUTPUT
          
          echo "🌐 Railway URL: $RAILWAY_URL"
          
        else
          echo "❌ Failed to configure Railway custom domain"
          echo "🔍 Check Railway CLI output for errors"
          
          # Set failure outputs
          echo "configured=false" >> $GITHUB_OUTPUT
          echo "cname-target=" >> $GITHUB_OUTPUT
          echo "railway-url=" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
name: 'Quality Pipeline'
description: 'Optimized quality checks with parallel execution support'
inputs:
  working-directory:
    description: 'Working directory to run commands in'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  pnpm-version:
    description: 'PNPM version to use'
    required: false
    default: '10.11.0'
  skip-tests:
    description: 'Skip running tests'
    required: false
    default: 'false'
  skip-build:
    description: 'Skip running build'
    required: false
    default: 'false'
  skip-audit:
    description: 'Skip security audit'
    required: false
    default: 'false'
  audit-level:
    description: 'Minimum severity level for audit failures'
    required: false
    default: 'high'

runs:
  using: 'composite'
  steps:
    - name: Setup Environment
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}
    
    - name: Setup Node.js with Cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'
        cache-dependency-path: ${{ inputs.working-directory }}/pnpm-lock.yaml
    
    - name: Install Dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: pnpm install --frozen-lockfile

    - name: Run Quality Checks
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Exit on any error
        set -e
        
        # Security audit (non-blocking)
        if [[ "${{ inputs.skip-audit }}" != "true" ]]; then
          echo "::group::Security Audit"
          pnpm audit --audit-level ${{ inputs.audit-level }} || echo "::warning::Security audit found vulnerabilities"
          echo "::endgroup::"
        fi
        
        # Core quality checks
        echo "::group::Lint"
        pnpm lint
        echo "::endgroup::"
        
        echo "::group::Type Check" 
        pnpm type-check
        echo "::endgroup::"
        
        # Optional checks
        if [[ "${{ inputs.skip-tests }}" != "true" ]]; then
          echo "::group::Tests"
          pnpm test
          echo "::endgroup::"
        fi
        
        if [[ "${{ inputs.skip-build }}" != "true" ]]; then
          echo "::group::Build"
          pnpm build
          echo "::endgroup::"
        fi
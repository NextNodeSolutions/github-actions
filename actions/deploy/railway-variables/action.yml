name: 'Railway Variables'
description: 'Set environment variables for Railway service'
author: 'NextNodeSolutions'

inputs:
  service-name:
    description: 'Railway service name'
    required: true
  environment:
    description: 'Deployment environment'
    required: true
  variables:
    description: 'Environment variables as JSON object'
    required: false
    default: '{}'
  memory-mb:
    description: 'Memory allocation in MB'
    required: false
    default: '512'
  railway-token:
    description: 'Railway API token'
    required: true

outputs:
  variables-count:
    description: 'Number of variables set'
    value: ${{ steps.set-vars.outputs.count }}

runs:
  using: 'composite'
  steps:
    - name: Set Environment Variables
      id: set-vars
      shell: bash
      run: |
        echo "::group::📝 Configuring Environment Variables"
        
        START_TIME=$(date +%s)
        VARIABLES_COUNT=0
        
        # Ensure we're in the right service context
        railway service "${{ inputs.service-name }}"
        
        # Set custom variables from JSON if provided
        if [[ '${{ inputs.variables }}' != '{}' ]]; then
          echo "• Setting custom variables:"
          echo '${{ inputs.variables }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read -r var; do
            VAR_NAME="${var%%=*}"
            VAR_VALUE="${var#*=}"
            echo "  → $VAR_NAME = ***"
            if railway variables --set "$var" --skip-deploys; then
              VARIABLES_COUNT=$((VARIABLES_COUNT + 1))
            else
              echo "  ⚠️ Failed to set $VAR_NAME"
            fi
          done
        fi
        
        # Always set NODE_ENV
        echo "• Setting standard variables:"
        echo "  → NODE_ENV = ${{ inputs.environment }}"
        if railway variables --set "NODE_ENV=${{ inputs.environment }}" --skip-deploys; then
          VARIABLES_COUNT=$((VARIABLES_COUNT + 1))
        else
          echo "  ⚠️ Failed to set NODE_ENV"
        fi
        
        # Set memory allocation
        echo "  → MEMORY_MB = ${{ inputs.memory-mb }}"
        if railway variables --set "MEMORY_MB=${{ inputs.memory-mb }}" --skip-deploys; then
          VARIABLES_COUNT=$((VARIABLES_COUNT + 1))
        else
          echo "  ⚠️ Failed to set MEMORY_MB"
        fi
        
        echo "count=$VARIABLES_COUNT" >> $GITHUB_OUTPUT
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "• Set $VARIABLES_COUNT variable(s) in ${DURATION}s"
        
        echo "::endgroup::"
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true
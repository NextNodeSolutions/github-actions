name: 'Railway PR Preview Cleanup'
description: 'Clean up PR preview deployment from Railway'
author: 'NextNodeSolutions'

inputs:
  app-name:
    description: 'Application name'
    required: true
  railway-token:
    description: 'Railway API token'
    required: true
  pr-number:
    description: 'Pull request number'
    required: true

outputs:
  cleaned:
    description: 'Whether cleanup was successful'
    value: ${{ steps.cleanup.outputs.cleaned }}
  service-name:
    description: 'Service name that was cleaned up'
    value: ${{ steps.cleanup.outputs.service-name }}

runs:
  using: 'composite'
  steps:
    - name: Setup Railway CLI
      uses: NextNodeSolutions/github-actions/actions/deploy/railway-cli-setup@main
      with:
        railway-token: ${{ inputs.railway-token }}

    - name: Cleanup PR Service
      id: cleanup
      shell: bash
      run: |
        echo "::group::🧹 Cleaning up PR Preview Service"

        START_TIME=$(date +%s)

        PR_NUMBER="${{ inputs.pr-number }}"
        APP_NAME="${{ inputs.app-name }}"
        SERVICE_NAME="pr-${PR_NUMBER}_${APP_NAME}"

        echo "• PR Number: $PR_NUMBER"
        echo "• App Name: $APP_NAME"
        echo "• Service Name: $SERVICE_NAME"

        # Set service name output
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT

        # Get project info using the existing railway.json link or search
        echo "• Finding Railway project..."

        # Try to get project from railway status
        PROJECT_JSON=$(railway status --json 2>/dev/null || echo "{}")
        PROJECT_ID=$(echo "$PROJECT_JSON" | jq -r '.project.id // empty' 2>/dev/null || echo "")

        # If no project found, try to find it by app name
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "empty" ]; then
          echo "⚠️  No linked project found, searching by name..."

          # List all projects and find matching one
          PROJECTS_LIST=$(railway list --json 2>/dev/null || echo "[]")
          PROJECT_ID=$(echo "$PROJECTS_LIST" | jq -r '.[] | select(.name | contains("'"$APP_NAME"'")) | .id' 2>/dev/null | head -1 || echo "")
        fi

        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "empty" ]; then
          echo "⚠️  Could not find Railway project for app: $APP_NAME"
          echo "• Cleanup may have already been completed or project doesn't exist"
          echo "cleaned=false" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit 0
        fi

        echo "• Project ID: ${PROJECT_ID:0:8}..."

        # Link to project and development environment
        echo "• Linking to development environment..."
        railway link --project "$PROJECT_ID" --environment development 2>/dev/null || {
          echo "⚠️  Could not link to development environment"
          echo "cleaned=false" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit 0
        }

        # Check if service exists using railway-service-info
        echo "• Checking if service exists..."
        SERVICE_INFO=$(railway status --json 2>/dev/null | jq -r '.services.edges[]? | .node | select(.name=="'"$SERVICE_NAME"'")' 2>/dev/null || echo "{}")
        SERVICE_ID=$(echo "$SERVICE_INFO" | jq -r '.id // empty')

        if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" == "empty" ] || [ "$SERVICE_INFO" == "{}" ]; then
          echo "✅ Service does not exist (already cleaned or never created)"
          echo "cleaned=true" >> $GITHUB_OUTPUT
        else
          echo "• Service found: $SERVICE_NAME"
          echo "• Service ID: ${SERVICE_ID:0:8}..."
          echo "• Deleting service..."

          # Delete the service using Railway CLI
          # Note: As of Railway CLI v3+, we use 'railway service delete'
          if railway service delete "$SERVICE_NAME" --yes 2>/dev/null; then
            echo "✅ Service deleted successfully"
            echo "cleaned=true" >> $GITHUB_OUTPUT
          else
            # Fallback: Try alternative deletion methods
            echo "⚠️  Direct deletion failed, trying alternative method..."

            # Try using GraphQL API directly
            curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer ${{ inputs.railway-token }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { serviceDelete(id: \\\"$SERVICE_ID\\\") }\"}" > /dev/null

            if [ $? -eq 0 ]; then
              echo "✅ Service deleted via API"
              echo "cleaned=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Failed to delete service"
              echo "cleaned=false" >> $GITHUB_OUTPUT
              # Don't exit with error - cleanup failures shouldn't block PR closure
            fi
          fi
        fi

        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "• Cleanup completed in ${DURATION}s"

        echo "::endgroup::"
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true

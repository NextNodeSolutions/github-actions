name: 'Railway Service Setup'
description: 'Create or link Railway service and environment'
author: 'NextNodeSolutions'

inputs:
  app-name:
    description: 'Application name'
    required: true
  environment:
    description: 'Deployment environment (development/staging/production)'
    required: true
  project-id:
    description: 'Railway project ID'
    required: true
  railway-token:
    description: 'Railway API token'
    required: true

outputs:
  service-id:
    description: 'Railway service ID'
    value: ${{ steps.setup.outputs.service-id }}
  service-name:
    description: 'Railway service name'
    value: ${{ steps.setup.outputs.service-name }}
  environment-name:
    description: 'Railway environment name'
    value: ${{ steps.setup.outputs.environment-name }}

runs:
  using: 'composite'
  steps:
    - name: Setup Railway Service
      id: setup
      shell: bash
      run: |
        echo "::group::🔧 Setting up Railway Service"
        
        START_TIME=$(date +%s)
        
        # Helper functions
        log_info() { echo "• $1"; }
        log_success() { echo "✅ $1"; }
        log_error() { echo "❌ $1"; }
        
        # Use project ID directly
        PROJECT_ID="${{ inputs.project-id }}"
        log_info "Project ID: ${PROJECT_ID:0:8}..."
        
        # Generate service name based on environment
        if [[ "${{ inputs.environment }}" == "production" ]]; then
          SERVICE_PREFIX="prod"
        elif [[ "${{ inputs.environment }}" == "staging" ]]; then
          SERVICE_PREFIX="staging"
        else
          SERVICE_PREFIX="dev"
        fi
        
        SERVICE_NAME="${SERVICE_PREFIX}_${{ inputs.app-name }}"
        ENVIRONMENT="${{ inputs.environment }}"
        
        log_info "Service: $SERVICE_NAME"
        log_info "Environment: $ENVIRONMENT"
        
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "environment-name=$ENVIRONMENT" >> $GITHUB_OUTPUT
        
        # Setup environment
        log_info "Setting up environment: $ENVIRONMENT"
        
        # Link to project and environment
        if ! railway link --project "$PROJECT_ID" --environment "$ENVIRONMENT" 2>/dev/null; then
          log_info "Creating new environment: $ENVIRONMENT"
          railway link --project "$PROJECT_ID"
          railway environment new "$ENVIRONMENT" || true  # May already exist
          railway environment "$ENVIRONMENT"
        fi
        
        log_success "Environment linked: $ENVIRONMENT"
        
        # Service management
        log_info "Checking for existing service..."
        
        # Get service info
        SERVICE_INFO=$(railway status --json 2>/dev/null | jq -r '.services.edges[]? | .node | select(.name=="'"$SERVICE_NAME"'")' 2>/dev/null || echo "{}")
        SERVICE_ID=$(echo "$SERVICE_INFO" | jq -r '.id // empty' 2>/dev/null || echo "")
        
        if [ -n "$SERVICE_ID" ] && [ "$SERVICE_ID" != "empty" ]; then
          log_success "Service found: $SERVICE_NAME (ID: ${SERVICE_ID:0:8}...)"
          {
          echo 'service-id<<EOF'
          echo "$SERVICE_ID"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        else
          log_info "Creating new service: $SERVICE_NAME"
          
          if railway add --service "$SERVICE_NAME"; then
            # Wait and retry to get service ID
            sleep 3
            for attempt in 1 2 3; do
              SERVICE_ID=$(railway status --json 2>/dev/null | jq -r '.services.edges[]? | .node | select(.name=="'"$SERVICE_NAME"'") | .id // empty' 2>/dev/null | head -1 || echo "")
              [ -n "$SERVICE_ID" ] && [ "$SERVICE_ID" != "empty" ] && break
              log_info "Waiting for service creation (attempt $attempt/3)..."
              sleep 2
            done
            
            if [ -n "$SERVICE_ID" ] && [ "$SERVICE_ID" != "empty" ]; then
              log_success "Service created: $SERVICE_NAME (ID: ${SERVICE_ID:0:8}...)"
              {
          echo 'service-id<<EOF'
          echo "$SERVICE_ID"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
            else
              log_error "Failed to retrieve service ID after creation"
              exit 1
            fi
          else
            log_error "Failed to create service: $SERVICE_NAME"
            exit 1
          fi
        fi
        
        # Activate service context
        log_info "Activating service context..."
        railway service "$SERVICE_NAME"
        
        # Export for subsequent steps in same job
        {
          echo 'SERVICE_ID<<EOF'
          echo "$SERVICE_ID"
          echo 'EOF'
        } >> $GITHUB_ENV
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        log_success "Service setup completed in ${DURATION}s"
        
        echo "::endgroup::"
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true
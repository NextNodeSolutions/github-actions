name: 'Railway Environment Sync'
description: 'Automatically sync GitHub environment variables and secrets to Railway'
author: 'NextNodeSolutions'

inputs:
  service-name:
    description: 'Railway service name'
    required: true
  environment:
    description: 'Deployment environment'
    required: true
  memory-mb:
    description: 'Memory allocation in MB'
    required: false
    default: '512'
  railway-token:
    description: 'Railway API token'
    required: true
  additional-filters:
    description: 'Additional regex patterns to exclude (pipe separated)'
    required: false
    default: ''
  secrets-json:
    description: 'GitHub secrets as JSON string'
    required: false
    default: '{}'
  vars-json:
    description: 'GitHub variables as JSON string'
    required: false
    default: '{}'

outputs:
  synced-count:
    description: 'Number of variables synced'
    value: ${{ steps.sync.outputs.count }}
  synced-secrets:
    description: 'List of synced secret names'
    value: ${{ steps.sync.outputs.secrets }}
  synced-vars:
    description: 'List of synced variable names'
    value: ${{ steps.sync.outputs.vars }}

runs:
  using: 'composite'
  steps:
    - name: Sync Environment Variables
      id: sync
      shell: bash
      run: |
        echo "::group::🔄 Syncing GitHub Environment to Railway"
        
        START_TIME=$(date +%s)
        SYNCED_COUNT=0
        SYNCED_SECRETS=""
        SYNCED_VARS=""
        
        # Ensure we're in the right service context
        railway service "${{ inputs.service-name }}"
        
        # Build exclusion pattern
        BASE_EXCLUSION="^GITHUB_|^RUNNER_|^ACTIONS_|^RAILWAY_API_TOKEN$|^CI$"
        ADDITIONAL_FILTERS="${{ inputs.additional-filters }}"
        
        if [[ -n "$ADDITIONAL_FILTERS" ]]; then
          # Replace pipes with regex OR
          ADDITIONAL_FILTERS="${ADDITIONAL_FILTERS//|/|^}"
          EXCLUSION_PATTERN="$BASE_EXCLUSION|^$ADDITIONAL_FILTERS"
        else
          EXCLUSION_PATTERN="$BASE_EXCLUSION"
        fi
        
        echo "📋 Exclusion pattern: $EXCLUSION_PATTERN"
        echo ""
        
        # Process secrets if available
        SECRETS_JSON='${{ inputs.secrets-json }}'
        if [[ "$SECRETS_JSON" != "null" ]] && [[ "$SECRETS_JSON" != "{}" ]]; then
          echo "🔐 Processing secrets..."
          SECRET_COUNT=$(echo "$SECRETS_JSON" | jq -r 'keys | length')
          echo "  Found $SECRET_COUNT total secrets"
          
          # Filter and set secrets
          echo "$SECRETS_JSON" | jq -r --arg pattern "$EXCLUSION_PATTERN" \
            'to_entries[] | select(.key | test($pattern) | not) | "\(.key)=\(.value)"' | \
          while IFS='=' read -r key value; do
            echo "  → Setting secret: $key"
            if railway variables --set "$key=$value" --skip-deploys; then
              SYNCED_COUNT=$((SYNCED_COUNT + 1))
              SYNCED_SECRETS="$SYNCED_SECRETS,$key"
            else
              echo "    ⚠️ Failed to set $key"
            fi
          done
        else
          echo "📭 No secrets found in environment"
        fi
        
        echo ""
        
        # Process variables if available
        VARS_JSON='${{ inputs.vars-json }}'
        if [[ "$VARS_JSON" != "null" ]] && [[ "$VARS_JSON" != "{}" ]]; then
          echo "📦 Processing variables..."
          VAR_COUNT=$(echo "$VARS_JSON" | jq -r 'keys | length')
          echo "  Found $VAR_COUNT total variables"
          
          # Filter and set variables
          echo "$VARS_JSON" | jq -r --arg pattern "$EXCLUSION_PATTERN" \
            'to_entries[] | select(.key | test($pattern) | not) | "\(.key)=\(.value)"' | \
          while IFS='=' read -r key value; do
            echo "  → Setting variable: $key"
            if railway variables --set "$key=$value" --skip-deploys; then
              SYNCED_COUNT=$((SYNCED_COUNT + 1))
              SYNCED_VARS="$SYNCED_VARS,$key"
            else
              echo "    ⚠️ Failed to set $key"
            fi
          done
        else
          echo "📭 No variables found in environment"
        fi
        
        echo ""
        echo "⚙️ Setting standard environment variables..."
        
        # Always set NODE_ENV based on environment
        NODE_ENV_VALUE="${{ inputs.environment }}"
        echo "  → NODE_ENV = $NODE_ENV_VALUE"
        if railway variables --set "NODE_ENV=$NODE_ENV_VALUE" --skip-deploys; then
          SYNCED_COUNT=$((SYNCED_COUNT + 1))
        else
          echo "    ⚠️ Failed to set NODE_ENV"
        fi
        
        # Set memory allocation
        echo "  → MEMORY_MB = ${{ inputs.memory-mb }}"
        if railway variables --set "MEMORY_MB=${{ inputs.memory-mb }}" --skip-deploys; then
          SYNCED_COUNT=$((SYNCED_COUNT + 1))
        else
          echo "    ⚠️ Failed to set MEMORY_MB"
        fi
        
        # Output results
        echo "count=$SYNCED_COUNT" >> $GITHUB_OUTPUT
        echo "secrets=${SYNCED_SECRETS#,}" >> $GITHUB_OUTPUT
        echo "vars=${SYNCED_VARS#,}" >> $GITHUB_OUTPUT
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        echo ""
        echo "✅ Synced $SYNCED_COUNT variable(s) in ${DURATION}s"
        echo "::endgroup::"
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true
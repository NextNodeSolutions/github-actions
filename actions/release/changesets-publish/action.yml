name: 'Changesets Publish'
description: 'Publish packages to NPM with security best practices'
author: 'NextNode'

inputs:
  npm-token:
    description: 'NPM authentication token'
    required: true
  publish-script:
    description: 'Script to run for publishing'
    required: false
    default: 'changeset:publish'
  dry-run:
    description: 'Run in dry-run mode'
    required: false
    default: 'false'
    type: boolean
  provenance:
    description: 'Enable NPM provenance'
    required: false
    default: 'true'
    type: boolean

outputs:
  published:
    description: 'Whether packages were published'
    value: ${{ steps.publish.outputs.published }}
  success:
    description: 'Whether publish operation was successful'
    value: ${{ steps.publish.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Pre-publish security checks
      shell: bash
      run: |
        echo "::group::üîê Pre-publish security checks"
        
        # Verify NPM_TOKEN is provided
        if [[ -z "${{ inputs.npm-token }}" ]]; then
          echo "‚ùå NPM_TOKEN is required but not provided"
          exit 1
        fi
        
        echo "‚úÖ NPM_TOKEN provided"
        
        # Check package.json for security
        if [[ -f "package.json" ]]; then
          # Check for publishConfig
          if node -pe "Boolean(require('./package.json').publishConfig)" >/dev/null 2>&1; then
            echo "‚úÖ publishConfig found in package.json"
          else
            echo "‚ö†Ô∏è  No publishConfig found in package.json"
          fi
          
          # Check for proper access setting
          ACCESS=$(node -pe "require('./package.json').publishConfig?.access || 'public'" 2>/dev/null)
          echo "üì¶ Package access: $ACCESS"
        fi
        
        echo "::endgroup::"

    - name: Build package if needed
      shell: bash
      run: |
        echo "::group::üèóÔ∏è  Building package"
        
        # Check if build script exists and if dist doesn't exist or is older than src
        if npm run build --silent >/dev/null 2>&1; then
          NEEDS_BUILD=false
          
          # Check if dist exists and is newer than src
          if [[ -d "dist" ]] && [[ -d "src" ]]; then
            if [[ $(find src -type f -newer dist 2>/dev/null | wc -l) -gt 0 ]]; then
              NEEDS_BUILD=true
            fi
          elif [[ ! -d "dist" ]] && [[ -d "src" ]]; then
            NEEDS_BUILD=true
          fi
          
          if [[ "$NEEDS_BUILD" == "true" ]]; then
            echo "üîÑ Building package..."
            npm run build
            echo "‚úÖ Package built successfully"
          else
            echo "‚ÑπÔ∏è  Build not needed - dist is up to date"
          fi
        else
          echo "‚ÑπÔ∏è  No build script found - skipping build"
        fi
        
        echo "::endgroup::"

    - name: Publish to NPM
      id: publish
      shell: bash
      run: |
        echo "::group::üöÄ Publishing to NPM"
        
        # Build command with options
        PUBLISH_CMD="pnpm run ${{ inputs.publish-script }}"
        [[ "${{ inputs.dry-run }}" == "true" ]] && PUBLISH_CMD="$PUBLISH_CMD --dry-run"
        [[ "${{ inputs.provenance }}" == "true" ]] && PUBLISH_CMD="$PUBLISH_CMD --provenance"
        
        echo "üîÑ Running: $PUBLISH_CMD"
        
        # Execute and capture result
        if OUTPUT=$($PUBLISH_CMD 2>&1); then
          echo "$OUTPUT"
          echo "‚úÖ Publish command completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
          
          # Check if changesets actually published something
          if echo "$OUTPUT" | grep -q "packages published successfully"; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No new versions to publish"
          fi
        else
          echo "$OUTPUT"
          echo "‚ùå Publish command failed"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "published=false" >> $GITHUB_OUTPUT
          
          # Provide helpful error context
          if echo "$OUTPUT" | grep -q "ENOTFOUND"; then
            echo "üí° Network error - check NPM registry connectivity"
          elif echo "$OUTPUT" | grep -q "E401\|E403"; then
            echo "üí° Authentication error - check NPM_TOKEN permissions"
          elif echo "$OUTPUT" | grep -q "E409"; then
            echo "üí° Version conflict - version may already exist"
          fi
          
          exit 1
        fi
        
        echo "::endgroup::"
      env:
        NPM_TOKEN: ${{ inputs.npm-token }}

    - name: Post-publish summary
      if: steps.publish.outputs.published == 'true' && inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "::group::üìä Publish Summary"
        
        if [[ -f "package.json" ]]; then
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "üéâ Successfully published:"
          echo "üì¶ $PACKAGE_NAME@$PACKAGE_VERSION"
          
          # Try to get package info from NPM
          echo "üîó NPM Package: https://www.npmjs.com/package/$PACKAGE_NAME"
          
          # Check if package is publicly available (with timeout)
          if timeout 30s npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version >/dev/null 2>&1; then
            echo "‚úÖ Package is now available on NPM"
          else
            echo "‚è≥ Package may take a few moments to appear on NPM"
          fi
        fi
        
        echo "::endgroup::"
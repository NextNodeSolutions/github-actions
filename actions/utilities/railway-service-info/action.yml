name: 'Railway Service Info'
description: 'Parse Railway service information from Railway CLI'
author: 'NextNodeSolutions'

inputs:
  service-name:
    description: 'Railway service name (mutually exclusive with app-name)'
    required: false
  app-name:
    description: 'Application name (used with or without pr-number)'
    required: false
  pr-number:
    description: 'PR number for preview deployments (used with app-name)'
    required: false
  railway-token:
    description: 'Railway API token'
    required: true

outputs:
  service-id:
    description: 'Railway service ID'
    value: ${{ steps.parse.outputs.service-id }}
  service-name:
    description: 'Railway service name'
    value: ${{ steps.parse.outputs.service-name }}
  service-exists:
    description: 'Whether the service exists (true/false)'
    value: ${{ steps.parse.outputs.service-exists }}
  railway-domain:
    description: 'Railway generated domain (*.up.railway.app)'
    value: ${{ steps.parse.outputs.railway-domain }}
  railway-url:
    description: 'Railway URL (https://...up.railway.app)'
    value: ${{ steps.parse.outputs.railway-url }}
  custom-domain:
    description: 'Custom domain if configured (e.g., pr-56.dev.nextnode.fr)'
    value: ${{ steps.parse.outputs.custom-domain }}
  base-domain:
    description: 'Base domain extracted from custom-domain (e.g., nextnode.fr)'
    value: ${{ steps.parse.outputs.base-domain }}
  deployment-id:
    description: 'Latest deployment ID'
    value: ${{ steps.parse.outputs.deployment-id }}
  deployment-status:
    description: 'Latest deployment status'
    value: ${{ steps.parse.outputs.deployment-status }}
  project-id:
    description: 'Railway project ID'
    value: ${{ steps.parse.outputs.project-id }}

runs:
  using: 'composite'
  steps:
    - name: Parse Railway Service Info
      id: parse
      shell: bash
      env:
        RAILWAY_API_TOKEN: ${{ inputs.railway-token }}
        CI: true
      run: |
        echo "::group::🔍 Parsing Railway Service Info"

        # Validate inputs
        HAS_SERVICE_NAME=$([[ -n "${{ inputs.service-name }}" ]] && echo "1" || echo "0")
        HAS_APP_NAME=$([[ -n "${{ inputs.app-name }}" ]] && echo "1" || echo "0")
        HAS_PR_NUMBER=$([[ -n "${{ inputs.pr-number }}" ]] && echo "1" || echo "0")

        # Determine service name based on inputs
        if [[ "$HAS_SERVICE_NAME" == "1" && "$HAS_APP_NAME" == "0" ]]; then
          # Case 1: service-name provided directly
          SERVICE_NAME="${{ inputs.service-name }}"
          echo "• Using provided service name: $SERVICE_NAME"
        elif [[ "$HAS_SERVICE_NAME" == "0" && "$HAS_APP_NAME" == "1" && "$HAS_PR_NUMBER" == "1" ]]; then
          # Case 2: app-name + pr-number (PR preview)
          SERVICE_NAME="pr-${{ inputs.pr-number }}_${{ inputs.app-name }}"
          echo "• Constructed PR preview service name: $SERVICE_NAME"
        elif [[ "$HAS_SERVICE_NAME" == "0" && "$HAS_APP_NAME" == "1" && "$HAS_PR_NUMBER" == "0" ]]; then
          # Case 3: app-name only (standard deployment)
          SERVICE_NAME="${{ inputs.app-name }}"
          echo "• Using app name as service name: $SERVICE_NAME"
        else
          echo "❌ Invalid input combination"
          echo "   Valid options:"
          echo "   1. service-name only"
          echo "   2. app-name + pr-number"
          echo "   3. app-name only"
          echo ""
          echo "   Provided:"
          echo "   - service-name: ${{ inputs.service-name }}"
          echo "   - app-name: ${{ inputs.app-name }}"
          echo "   - pr-number: ${{ inputs.pr-number }}"
          exit 1
        fi

        # Fetch service info from Railway (single call)
        echo "• Fetching service info from Railway..."
        SERVICE_INFO=$(railway status --json 2>/dev/null | jq -r '.services.edges[] | .node | select(.name=="'"$SERVICE_NAME"'")' || echo "")

        # Check if service exists
        if [[ -z "$SERVICE_INFO" || "$SERVICE_INFO" == "null" ]]; then
          echo "⚠️  Service not found: $SERVICE_NAME"
          echo "service-exists=false" >> $GITHUB_OUTPUT
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "service-id=" >> $GITHUB_OUTPUT
          echo "railway-domain=" >> $GITHUB_OUTPUT
          echo "railway-url=" >> $GITHUB_OUTPUT
          echo "custom-domain=" >> $GITHUB_OUTPUT
          echo "base-domain=" >> $GITHUB_OUTPUT
          echo "deployment-id=" >> $GITHUB_OUTPUT
          echo "deployment-status=" >> $GITHUB_OUTPUT
          echo "project-id=" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit 0
        fi

        echo "✅ Service found"
        echo "service-exists=true" >> $GITHUB_OUTPUT
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT

        # Parse all fields from SERVICE_INFO
        SERVICE_ID=$(echo "$SERVICE_INFO" | jq -r '.id // empty')
        echo "• Service ID: ${SERVICE_ID:0:8}..."
        echo "service-id=$SERVICE_ID" >> $GITHUB_OUTPUT

        # Parse Railway domain
        RAILWAY_DOMAIN=$(echo "$SERVICE_INFO" | jq -r '.serviceInstances.edges[].node.domains.serviceDomains[0].domain // empty' 2>/dev/null)
        if [[ -n "$RAILWAY_DOMAIN" && "$RAILWAY_DOMAIN" != "null" ]]; then
          RAILWAY_URL="https://$RAILWAY_DOMAIN"
          echo "• Railway domain: $RAILWAY_DOMAIN"
        else
          RAILWAY_URL=""
          echo "• Railway domain: (none)"
        fi
        echo "railway-domain=$RAILWAY_DOMAIN" >> $GITHUB_OUTPUT
        echo "railway-url=$RAILWAY_URL" >> $GITHUB_OUTPUT

        # Parse custom domain
        CUSTOM_DOMAIN=$(echo "$SERVICE_INFO" | jq -r '.serviceInstances.edges[].node.domains.customDomains[0].domain // empty' 2>/dev/null)
        if [[ -n "$CUSTOM_DOMAIN" && "$CUSTOM_DOMAIN" != "null" ]]; then
          echo "• Custom domain: $CUSTOM_DOMAIN"

          # Extract base-domain from custom-domain
          # Pattern: pr-{number}.dev.{base-domain} OR {env}.{base-domain} OR {base-domain}
          # Remove pr-X.dev. prefix if exists
          BASE_DOMAIN=$(echo "$CUSTOM_DOMAIN" | sed -E 's/^pr-[0-9]+\.dev\.//')
          # Remove dev./staging./test. prefix if exists
          BASE_DOMAIN=$(echo "$BASE_DOMAIN" | sed -E 's/^(dev|staging|test)\.//')

          echo "• Base domain: $BASE_DOMAIN"
        else
          CUSTOM_DOMAIN=""
          BASE_DOMAIN=""
          echo "• Custom domain: (none)"
        fi
        echo "custom-domain=$CUSTOM_DOMAIN" >> $GITHUB_OUTPUT
        echo "base-domain=$BASE_DOMAIN" >> $GITHUB_OUTPUT

        # Parse deployment info
        DEPLOYMENT_ID=$(echo "$SERVICE_INFO" | jq -r '.serviceInstances.edges[].node.latestDeployment.id // empty' 2>/dev/null)
        DEPLOYMENT_STATUS=$(echo "$SERVICE_INFO" | jq -r '.serviceInstances.edges[].node.latestDeployment.status // empty' 2>/dev/null)
        echo "• Deployment ID: ${DEPLOYMENT_ID:0:8}..."
        echo "• Deployment status: $DEPLOYMENT_STATUS"
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "deployment-status=$DEPLOYMENT_STATUS" >> $GITHUB_OUTPUT

        # Parse project ID from status
        PROJECT_ID=$(railway status --json 2>/dev/null | jq -r '.project.id // empty')
        echo "• Project ID: ${PROJECT_ID:0:8}..."
        echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT

        echo "::endgroup::"

name: 'Comprehensive Test Runner'
description: 'Centralized testing logic for actions and workflows with dependency validation'
author: 'NextNodeSolutions'

inputs:
  test-mode:
    description: 'Test mode: atomic-action, pack-workflow, or integration'
    required: true
    type: string
  target-path:
    description: 'Path to the action or workflow to test'
    required: false
    default: ''
  working-directory:
    description: 'Working directory for test project'
    required: false
    default: 'test-project'
  test-name:
    description: 'Name of the test for logging'
    required: false
    default: 'Test'
  validate-dependencies:
    description: 'Whether to validate action dependencies'
    required: false
    default: 'true'
  create-test-project:
    description: 'Whether to create a test project'
    required: false
    default: 'true'
  available-actions:
    description: 'JSON array of available actions from discovery (for reference validation)'
    required: false
    default: '[]'
  enable-reference-validation:
    description: 'Enable validation of uses: references'
    required: false
    default: 'false'

outputs:
  test-result:
    description: 'Test result: success or failure'
    value: ${{ steps.run-test.outputs.result }}
  test-details:
    description: 'Detailed test information'
    value: ${{ steps.run-test.outputs.details }}

runs:
  using: 'composite'
  steps:
    - name: Setup test environment
      id: setup
      shell: bash
      run: |
        echo "::group::🔧 Setting Up Test Environment"
        
        TEST_MODE="${{ inputs.test-mode }}"
        TARGET_PATH="${{ inputs.target-path }}"
        WORKING_DIR="${{ inputs.working-directory }}"
        TEST_NAME="${{ inputs.test-name }}"
        
        echo "• Test mode: $TEST_MODE"
        echo "• Target path: $TARGET_PATH"
        echo "• Working directory: $WORKING_DIR" 
        echo "• Test name: $TEST_NAME"
        
        # Validate test mode
        case "$TEST_MODE" in
          atomic-action|pack-workflow|integration)
            echo "✅ Valid test mode"
            ;;
          *)
            echo "❌ Invalid test mode: $TEST_MODE"
            echo "Valid modes: atomic-action, pack-workflow, integration"
            exit 1
            ;;
        esac
        
        echo "::endgroup::"
    
    - name: Create test project
      id: project
      if: inputs.create-test-project == 'true'
      shell: bash
      run: |
        echo "::group::📁 Creating Test Project"
        
        WORKING_DIR="${{ inputs.working-directory }}"
        
        # Remove existing if it exists
        if [[ -d "$WORKING_DIR" ]]; then
          rm -rf "$WORKING_DIR"
        fi
        
        mkdir -p "$WORKING_DIR"
        cd "$WORKING_DIR"
        
        # Create comprehensive package.json
        cat > package.json << 'EOF'
        {
          "name": "comprehensive-test-project",
          "version": "1.0.0",
          "type": "module",
          "scripts": {
            "dev": "echo 'Starting dev server...' && sleep 1",
            "build": "echo 'Building project...' && mkdir -p dist && echo 'export default {};' > dist/index.js",
            "build:dev": "echo 'Building for development...' && mkdir -p dist && echo 'export default {};' > dist/index.js",
            "lint": "echo 'Running lint...' && exit 0",
            "type-check": "echo 'Running type check...' && exit 0", 
            "test": "echo 'Running tests...' && exit 0",
            "test:coverage": "echo 'Running tests with coverage...' && mkdir -p coverage && echo '{\"total\":{\"lines\":{\"pct\":85}}}' > coverage/coverage-summary.json"
          },
          "devDependencies": {}
        }
        EOF
        
        # Create pnpm-lock.yaml
        cat > pnpm-lock.yaml << 'EOF'
        lockfileVersion: '9.0'
        settings:
          autoInstallPeers: true
          excludeLinksFromLockfile: false
        dependencies: {}
        devDependencies: {}
        EOF
        
        # Create tsconfig.json
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "strict": true,
            "target": "ES2022",
            "module": "ESNext",
            "moduleResolution": "node",
            "esModuleInterop": true,
            "skipLibCheck": true,
            "forceConsistentCasingInFileNames": true
          }
        }
        EOF
        
        # Create eslint.config.mjs
        cat > eslint.config.mjs << 'EOF'
        export default {
          rules: {
            'no-console': 'warn'
          }
        };
        EOF
        
        echo "✅ Test project created in $WORKING_DIR"
        echo "::endgroup::"
    
    - name: Validate action dependencies
      id: validate-deps
      if: inputs.validate-dependencies == 'true' && inputs.test-mode == 'atomic-action'
      shell: bash
      run: |
        echo "::group::🔍 Validating Action Dependencies"
        
        TARGET_PATH="${{ inputs.target-path }}"
        
        if [[ -z "$TARGET_PATH" ]]; then
          echo "⚠️ No target path provided, skipping dependency validation"
          echo "::endgroup::"
          exit 0
        fi
        
        ACTION_FILE="$TARGET_PATH/action.yml"
        
        if [[ ! -f "$ACTION_FILE" ]]; then
          echo "❌ Action file not found: $ACTION_FILE"
          exit 1
        fi
        
        echo "• Checking action file: $ACTION_FILE"
        
        # Basic structure check with grep
        echo "• Checking required fields..."
        
        if grep -q "^name:" "$ACTION_FILE"; then
          echo "✅ Found 'name' field"
        else
          echo "❌ Missing 'name' field"
          exit 1
        fi
        
        if grep -q "^description:" "$ACTION_FILE"; then
          echo "✅ Found 'description' field"
        else
          echo "❌ Missing 'description' field"
          exit 1
        fi
        
        if grep -q "^runs:" "$ACTION_FILE"; then
          echo "✅ Found 'runs' field"
        else
          echo "❌ Missing 'runs' field"
          exit 1
        fi
        
        echo "✅ Action structure is valid"
        
        echo "::endgroup::"
    
    - name: Validate references  
      id: validate-refs
      if: inputs.enable-reference-validation == 'true' && inputs.target-path != ''
      uses: ./actions/utilities/reference-validator
      with:
        target-file: ${{ inputs.test-mode == 'pack-workflow' && inputs.target-path || format('{0}/action.yml', inputs.target-path) }}
        available-actions: ${{ inputs.available-actions }}
        file-type: ${{ inputs.test-mode == 'pack-workflow' && 'workflow' || 'action' }}
    
    - name: Run comprehensive test
      id: run-test
      shell: bash
      run: |
        echo "::group::🧪 Running Comprehensive Test"
        
        TEST_MODE="${{ inputs.test-mode }}"
        TARGET_PATH="${{ inputs.target-path }}"
        WORKING_DIR="${{ inputs.working-directory }}"
        TEST_NAME="${{ inputs.test-name }}"
        
        START_TIME=$(date +%s)
        TEST_RESULT="success"
        TEST_DETAILS=""
        
        case "$TEST_MODE" in
          atomic-action)
            echo "🔬 Testing Atomic Action: $TEST_NAME"
            
            if [[ -z "$TARGET_PATH" ]]; then
              echo "❌ Target path required for atomic action testing"
              TEST_RESULT="failure"
              TEST_DETAILS="Missing target path"
            else
              # Test that action path exists
              if [[ -f "$TARGET_PATH/action.yml" ]]; then
                echo "✅ Action file exists: $TARGET_PATH/action.yml"
                
                # Check if it's in correct domain structure
                if [[ "$TARGET_PATH" =~ ^actions/[^/]+/[^/]+$ ]]; then
                  echo "✅ Uses domain-organized structure"
                elif [[ "$TARGET_PATH" =~ ^actions/(test|health-check)$ ]]; then
                  echo "✅ Global action (allowed at root level)"
                else
                  echo "⚠️ Warning: Action not in expected domain structure"
                fi
                
                TEST_DETAILS="Action validated successfully"
              else
                echo "❌ Action file not found: $TARGET_PATH/action.yml"
                TEST_RESULT="failure"
                TEST_DETAILS="Action file not found"
              fi
            fi
            ;;
            
          pack-workflow)
            echo "📦 Testing Pack Workflow: $TEST_NAME"
            
            if [[ -z "$TARGET_PATH" ]]; then
              echo "❌ Target path required for pack workflow testing"
              TEST_RESULT="failure"
              TEST_DETAILS="Missing target path"
            else
              # Test that workflow file exists and is valid YAML
              if [[ -f "$TARGET_PATH" ]]; then
                echo "✅ Workflow file exists: $TARGET_PATH"
                
                # Check for workflow_call trigger
                echo "• Checking workflow triggers..."
                
                if grep -q "workflow_call:" "$TARGET_PATH"; then
                  echo "✅ Has workflow_call trigger"
                  TEST_DETAILS="Workflow validated successfully"
                else
                  echo "⚠️ No workflow_call trigger found"
                  TEST_DETAILS="Workflow validated (no workflow_call trigger)"
                fi
                
              else
                echo "❌ Workflow file not found: $TARGET_PATH"
                TEST_RESULT="failure"
                TEST_DETAILS="Workflow file not found"
              fi
            fi
            ;;
            
          integration)
            echo "🔗 Running Integration Test: $TEST_NAME"
            
            # Test full workflow sequence if test project exists
            if [[ "${{ inputs.create-test-project }}" == "true" && -d "$WORKING_DIR" ]]; then
              cd "$WORKING_DIR"
              
              echo "• Testing build process..."
              if pnpm run build 2>/dev/null || npm run build 2>/dev/null; then
                echo "✅ Build successful"
              else
                echo "❌ Build failed"
                TEST_RESULT="failure"
                TEST_DETAILS="Build process failed"
              fi
              
              echo "• Testing lint process..."
              if pnpm run lint 2>/dev/null || npm run lint 2>/dev/null; then
                echo "✅ Lint successful"
              else
                echo "⚠️ Lint warning (non-critical)"
              fi
              
              # Check build output
              if [[ -f "dist/index.js" ]]; then
                echo "✅ Build output verified"
                TEST_DETAILS="Integration test completed successfully"
              else
                echo "❌ Build output not found"
                TEST_RESULT="failure"
                TEST_DETAILS="Build output verification failed"
              fi
            else
              echo "✅ Integration test completed (no test project)"
              TEST_DETAILS="Integration test completed"
            fi
            ;;
        esac
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        echo "• Test duration: ${DURATION}s"
        echo "• Test result: $TEST_RESULT"
        echo "• Test details: $TEST_DETAILS"
        
        echo "result=$TEST_RESULT" >> $GITHUB_OUTPUT
        echo "details=$TEST_DETAILS" >> $GITHUB_OUTPUT
        
        if [[ "$TEST_RESULT" == "failure" ]]; then
          echo "❌ Test failed: $TEST_DETAILS"
          echo "::endgroup::"
          exit 1
        else
          echo "✅ Test passed: $TEST_DETAILS"
        fi
        
        echo "::endgroup::"
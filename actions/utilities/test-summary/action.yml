name: 'Test Summary Reporter'
description: 'Generate test summary report from job results'
author: 'NextNodeSolutions'

inputs:
  test-results:
    description: 'Test results as JSON array: [{"name": "Test Name", "result": "success|failure|skipped"}]'
    required: true
  title:
    description: 'Summary title'
    required: false
    default: 'üß™ Test Results'
  fail-on-error:
    description: 'Fail the action if any tests failed'
    required: false
    default: 'true'
  additional-info:
    description: 'Additional information to include'
    required: false
    default: ''

outputs:
  failed-count:
    description: 'Number of failed tests'
    value: ${{ steps.summary.outputs.failed-count }}
  total-count:
    description: 'Total number of tests'
    value: ${{ steps.summary.outputs.total-count }}

runs:
  using: 'composite'
  steps:
    - name: Generate test summary
      id: summary
      shell: bash
      run: |
        echo "::group::üìä Generating Test Summary"
        
        # Parse test results JSON
        TEST_RESULTS='${{ inputs.test-results }}'
        echo "‚Ä¢ Processing test results..."
        
        # Start summary
        echo "### ${{ inputs.title }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Process each test result
        FAILED_COUNT=0
        TOTAL_COUNT=0
        
        echo "$TEST_RESULTS" | jq -r '.[] | @base64' | while IFS= read -r encoded_test; do
          test_data=$(echo "$encoded_test" | base64 -d)
          name=$(echo "$test_data" | jq -r '.name')
          result=$(echo "$test_data" | jq -r '.result')
          
          # Format status
          case "$result" in
            success) status="‚úÖ Passed" ;;
            failure) status="‚ùå Failed"; FAILED_COUNT=$((FAILED_COUNT + 1)) ;;
            skipped) status="‚è≠Ô∏è Skipped" ;;
            *) status="‚ö†Ô∏è Unknown" ;;
          esac
          
          echo "| $name | $status |" >> $GITHUB_STEP_SUMMARY
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
        done
        
        # Re-calculate counts (because of subshell)
        FAILED_COUNT=$(echo "$TEST_RESULTS" | jq '[.[] | select(.result != "success")] | length')
        TOTAL_COUNT=$(echo "$TEST_RESULTS" | jq 'length')
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ $FAILED_COUNT -eq 0 ]]; then
          echo "‚úÖ **All $TOTAL_COUNT test suite(s) passed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **$FAILED_COUNT out of $TOTAL_COUNT test suite(s) failed.**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add additional info if provided
        if [[ -n "${{ inputs.additional-info }}" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ inputs.additional-info }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Set outputs
        echo "failed-count=$FAILED_COUNT" >> $GITHUB_OUTPUT
        echo "total-count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        
        echo "‚Ä¢ Summary generated: $TOTAL_COUNT total, $FAILED_COUNT failed"
        echo "::endgroup::"
        
        # Fail if requested and tests failed
        if [[ "${{ inputs.fail-on-error }}" == "true" && $FAILED_COUNT -gt 0 ]]; then
          echo "‚ùå Failing due to test failures"
          exit 1
        fi
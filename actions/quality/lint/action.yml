name: 'Lint Code'
description: 'Atomic action to lint code using pnpm'
inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  lint-command:
    description: 'Lint command to run'
    required: false
    default: 'lint'
  fix:
    description: 'Auto-fix issues'
    required: false
    default: 'false'
  fail-on-warning:
    description: 'Fail on warnings'
    required: false
    default: 'false'
  eslint-config:
    description: 'ESLint config file'
    required: false
    default: 'eslint.config.mjs'

outputs:
  errors:
    description: 'Number of linting errors'
    value: ${{ steps.lint.outputs.errors }}
  warnings:
    description: 'Number of linting warnings'
    value: ${{ steps.lint.outputs.warnings }}
  fixed:
    description: 'Number of auto-fixed issues'
    value: ${{ steps.lint.outputs.fixed }}
  duration:
    description: 'Time taken'
    value: ${{ steps.lint.outputs.duration }}

runs:
  using: 'composite'
  steps:
    - name: Setup
      shell: bash
      run: |
        echo "::group::üîç Lint Setup"
        echo "‚Ä¢ Working directory: ${{ inputs.working-directory }}"
        echo "‚Ä¢ Lint command: pnpm ${{ inputs.lint-command }}"
        echo "‚Ä¢ Auto-fix: ${{ inputs.fix }}"
        echo "‚Ä¢ Fail on warning: ${{ inputs.fail-on-warning }}"
        echo "‚Ä¢ Config file: ${{ inputs.eslint-config }}"
        echo "::endgroup::"

    - name: Verify lint configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üìã Verifying Lint Configuration"
        
        # Check for ESLint config
        if [[ -f "${{ inputs.eslint-config }}" ]]; then
          echo "‚úÖ Found ESLint config: ${{ inputs.eslint-config }}"
        elif [[ -f ".eslintrc.js" ]] || [[ -f ".eslintrc.json" ]] || [[ -f ".eslintrc.yml" ]]; then
          echo "‚úÖ Found ESLint config (legacy format)"
        else
          echo "‚ö†Ô∏è No ESLint configuration found"
        fi
        
        # Check for @nextnode/eslint-plugin
        if grep -q "@nextnode/eslint-plugin" package.json 2>/dev/null; then
          echo "‚úÖ Using @nextnode/eslint-plugin"
        fi
        
        # Check for prettier config
        if [[ -f ".prettierrc" ]] || [[ -f "prettier.config.js" ]] || [[ -f ".prettierrc.json" ]]; then
          echo "‚úÖ Found Prettier configuration"
        fi
        
        # Check for biome config
        if [[ -f "biome.json" ]]; then
          echo "‚úÖ Found Biome configuration"
        fi
        
        echo "::endgroup::"

    - name: Run linting
      id: lint
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üßπ Running Linter"
        
        START_TIME=$(date +%s)
        
        # Build lint command
        LINT_CMD="pnpm ${{ inputs.lint-command }}"
        
        # Add fix flag if requested
        if [[ "${{ inputs.fix }}" == "true" ]]; then
          LINT_CMD="$LINT_CMD --fix"
          echo "‚Ä¢ Auto-fix enabled"
        fi
        
        echo "‚Ä¢ Executing: $LINT_CMD"
        
        # Create temp file for output
        OUTPUT_FILE=$(mktemp)
        
        # Run linting and capture output
        if $LINT_CMD 2>&1 | tee "$OUTPUT_FILE"; then
          LINT_STATUS="success"
          echo "‚úÖ Linting passed"
        else
          LINT_STATUS="failed"
          echo "‚ùå Linting failed"
        fi
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        # Parse output for errors and warnings (simple approach)
        if ! ERROR_COUNT=$(grep -c " error " "$OUTPUT_FILE" 2>/dev/null); then
            ERROR_COUNT=0
        fi
        if ! WARNING_COUNT=$(grep -c " warning " "$OUTPUT_FILE" 2>/dev/null); then
            WARNING_COUNT=0
        fi
        
        # Count fixed issues if auto-fix was enabled
        if [[ "${{ inputs.fix }}" == "true" ]]; then
          FIXED_COUNT=$(grep -c "fixed" "$OUTPUT_FILE" 2>/dev/null || true)
          FIXED_COUNT=${FIXED_COUNT:-0}
          echo "‚Ä¢ Issues auto-fixed: $FIXED_COUNT"
          echo "fixed=$FIXED_COUNT" >> $GITHUB_OUTPUT
        else
          echo "fixed=0" >> $GITHUB_OUTPUT
        fi
        
        echo "‚Ä¢ Errors found: $ERROR_COUNT"
        echo "‚Ä¢ Warnings found: $WARNING_COUNT"
        echo "‚Ä¢ Duration: ${DURATION}s"
        
        echo "errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
        
        # Clean up
        rm -f "$OUTPUT_FILE"
        
        echo "::endgroup::"
        
        # Handle failure conditions
        if [[ "$LINT_STATUS" == "failed" ]]; then
          exit 1
        fi
        
        if [[ "${{ inputs.fail-on-warning }}" == "true" ]] && [[ "$WARNING_COUNT" -gt 0 ]]; then
          echo "‚ùå Failing due to warnings (fail-on-warning is enabled)"
          exit 1
        fi

    - name: Check for uncommitted fixes
      if: inputs.fix == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üìù Checking for Uncommitted Fixes"
        
        if [[ -n "$(git status --porcelain 2>/dev/null)" ]]; then
          echo "‚ö†Ô∏è Auto-fix created changes:"
          git diff --stat
          echo ""
          echo "Please review and commit these changes."
        else
          echo "‚úÖ No uncommitted changes after auto-fix"
        fi
        
        echo "::endgroup::"

    - name: Lint summary
      if: always()
      shell: bash
      run: |
        echo "::group::üìä Lint Summary"
        echo "‚Ä¢ Errors: ${{ steps.lint.outputs.errors }}"
        echo "‚Ä¢ Warnings: ${{ steps.lint.outputs.warnings }}"
        if [[ "${{ inputs.fix }}" == "true" ]]; then
          echo "‚Ä¢ Fixed: ${{ steps.lint.outputs.fixed }}"
        fi
        echo "‚Ä¢ Duration: ${{ steps.lint.outputs.duration }}"
        
        if [[ "${{ steps.lint.outputs.errors }}" == "0" ]]; then
          if [[ "${{ steps.lint.outputs.warnings }}" == "0" ]]; then
            echo "‚úÖ Code is clean - no issues found"
          else
            echo "‚ö†Ô∏è Code has ${{ steps.lint.outputs.warnings }} warning(s)"
          fi
        else
          echo "‚ùå Fix ${{ steps.lint.outputs.errors }} error(s) before proceeding"
        fi
        
        echo "::endgroup::"
name: 'Health Check'
description: 'Perform health check on a URL with retries'
inputs:
  url:
    description: 'URL to check'
    required: true
  max-attempts:
    description: 'Maximum number of attempts'
    required: false
    default: '30'
  delay-seconds:
    description: 'Delay between attempts in seconds'
    required: false
    default: '10'
  expected-status:
    description: 'Expected HTTP status code (comma-separated for multiple)'
    required: false
    default: '200,201,204,301,302'
  timeout-seconds:
    description: 'Request timeout in seconds'
    required: false
    default: '30'
  fail-on-error:
    description: 'Fail the action if health check fails'
    required: false
    default: 'true'
  headers:
    description: 'Additional headers as JSON object'
    required: false
    default: '{}'

outputs:
  healthy:
    description: 'Whether the health check passed'
    value: ${{ steps.check.outputs.healthy }}
  status-code:
    description: 'Final HTTP status code'
    value: ${{ steps.check.outputs.status-code }}
  response-time:
    description: 'Response time in milliseconds'
    value: ${{ steps.check.outputs.response-time }}
  attempts:
    description: 'Number of attempts made'
    value: ${{ steps.check.outputs.attempts }}

runs:
  using: 'composite'
  steps:
    - name: Perform Health Check
      id: check
      shell: bash
      run: |
        echo "::group::🏥 Health Check for ${{ inputs.url }}"
        
        URL="${{ inputs.url }}"
        MAX_ATTEMPTS=${{ inputs.max-attempts }}
        DELAY=${{ inputs.delay-seconds }}
        TIMEOUT=${{ inputs.timeout-seconds }}
        EXPECTED_STATUS="${{ inputs.expected-status }}"
        HEADERS='${{ inputs.headers }}'
        
        # Build curl headers
        CURL_HEADERS=""
        if [[ "$HEADERS" != "{}" ]] && echo "$HEADERS" | jq -e . >/dev/null 2>&1; then
          while IFS= read -r header; do
            CURL_HEADERS="$CURL_HEADERS -H '$header'"
          done < <(echo "$HEADERS" | jq -r 'to_entries | .[] | "\(.key): \(.value)"')
        fi
        
        echo "📋 Configuration:"
        echo "  • Max attempts: $MAX_ATTEMPTS"
        echo "  • Delay: ${DELAY}s"
        echo "  • Timeout: ${TIMEOUT}s"
        echo "  • Expected status: $EXPECTED_STATUS"
        echo ""
        
        ATTEMPT=0
        HEALTHY=false
        FINAL_STATUS=""
        RESPONSE_TIME=""
        
        echo "DEBUG: Starting health check loop..."
        echo "DEBUG: ATTEMPT=$ATTEMPT, MAX_ATTEMPTS=$MAX_ATTEMPTS"
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          echo "DEBUG: Before increment, ATTEMPT=$ATTEMPT"
          ATTEMPT=$((ATTEMPT + 1))
          echo "DEBUG: After increment, ATTEMPT=$ATTEMPT"
          echo "🔄 Attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          # Perform the health check
          echo "  DEBUG: About to get start time..."
          # Use seconds for timing (milliseconds not always supported)
          START_TIME=$(date +%s)
          echo "  DEBUG: Start time: $START_TIME"
          echo "  DEBUG: About to execute curl command for URL: $URL"
          echo "  DEBUG: Timeout: $TIMEOUT seconds"
          
          set +e  # Don't exit on curl failure
          RESPONSE=$(curl -s -o /dev/null -w '%{http_code}' --max-time $TIMEOUT "$URL" 2>&1)
          CURL_EXIT_CODE=$?
          set -e
          
          echo "  DEBUG: Curl exit code: $CURL_EXIT_CODE"
          echo "  DEBUG: Curl response: '$RESPONSE'"
          
          if [ $CURL_EXIT_CODE -eq 0 ]; then
            END_TIME=$(date +%s)
            RESPONSE_TIME=$((END_TIME - START_TIME))
            
            echo "  Response: HTTP $RESPONSE (${RESPONSE_TIME}s)"
            echo "  DEBUG: Checking if '$RESPONSE' is in '$EXPECTED_STATUS'"
            
            # Check if status is in expected list
            if [[ ",$EXPECTED_STATUS," == *",$RESPONSE,"* ]]; then
              echo "✅ Health check passed!"
              HEALTHY=true
              FINAL_STATUS=$RESPONSE
              break
            else
              echo "  ⚠️  Unexpected status code: $RESPONSE"
            fi
          else
            echo "  ❌ Request failed: $RESPONSE (exit code: $CURL_EXIT_CODE)"
          fi
          
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            echo "  Waiting ${DELAY}s before retry..."
            sleep $DELAY
          fi
        done
        
        echo ""
        if [[ "$HEALTHY" == "true" ]]; then
          echo "✅ Health check successful after $ATTEMPT attempt(s)"
          echo "  • Status: HTTP $FINAL_STATUS"
          echo "  • Response time: ${RESPONSE_TIME}s"
        else
          echo "❌ Health check failed after $ATTEMPT attempt(s)"
          if [[ "${{ inputs.fail-on-error }}" == "true" ]]; then
            echo "::endgroup::"
            exit 1
          fi
        fi
        
        # Set outputs
        echo "healthy=$HEALTHY" >> $GITHUB_OUTPUT
        echo "status-code=$FINAL_STATUS" >> $GITHUB_OUTPUT
        echo "response-time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        echo "attempts=$ATTEMPT" >> $GITHUB_OUTPUT
        
        echo "::endgroup::"
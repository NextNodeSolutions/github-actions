name: Railway PR Preview

# EXTERNAL WORKFLOW - Automated PR preview deployments to Railway
# Deploys each PR to pr-{number}.dev.{base-domain}

on:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name for Railway project'
        required: true
        type: string
      base-domain:
        description: 'Base domain for PR previews (e.g. nextnode.fr)'
        required: true
        type: string
      base-environment:
        description: 'Base Railway environment for PR previews'
        required: false
        default: 'development'
        type: string
      run-quality-checks:
        description: 'Run quality checks (lint + typecheck) before deployment'
        required: false
        default: true
        type: boolean
      working-directory:
        description: 'Working directory'
        required: false
        default: '.'
        type: string
      memory-mb:
        description: 'Memory allocation in MB for PR preview'
        required: false
        default: '512'
        type: string
      timeout-seconds:
        description: 'Deployment timeout in seconds'
        required: false
        default: '300'
        type: string
    secrets:
      RAILWAY_API_TOKEN:
        required: true

jobs:
  quality-checks:
    name: Quality Checks
    if: inputs.run-quality-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: NextNodeSolutions/github-actions/actions/node-setup-complete@main
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Lint
        uses: NextNodeSolutions/github-actions/actions/quality/lint@main
        with:
          working-directory: ${{ inputs.working-directory }}
          fail-on-warning: false

      - name: Type Check
        uses: NextNodeSolutions/github-actions/actions/quality/typecheck@main
        with:
          working-directory: ${{ inputs.working-directory }}

  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: |
      always() &&
      (needs.quality-checks.result == 'success' || needs.quality-checks.result == 'skipped')
    outputs:
      deployment-url: ${{ steps.domain.outputs.deployment-url }}
      service-name: ${{ steps.domain.outputs.service-name }}
      railway-url: ${{ steps.url.outputs.railway-url }}
      deployment-status: ${{ steps.wait.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Calculate PR Service Name and Domain
        id: domain
        shell: bash
        run: |
          echo "::group::üîß Calculating PR Preview Configuration"

          PR_NUMBER="${{ github.event.pull_request.number }}"
          APP_NAME="${{ inputs.app-name }}"
          BASE_DOMAIN="${{ inputs.base-domain }}"

          # Generate service name and custom domain
          SERVICE_NAME="pr-${PR_NUMBER}_${APP_NAME}"
          CUSTOM_DOMAIN="pr-${PR_NUMBER}.dev.${BASE_DOMAIN}"
          DEPLOYMENT_URL="https://${CUSTOM_DOMAIN}"

          echo "‚Ä¢ PR Number: $PR_NUMBER"
          echo "‚Ä¢ App Name: $APP_NAME"
          echo "‚Ä¢ Service Name: $SERVICE_NAME"
          echo "‚Ä¢ Custom Domain: $CUSTOM_DOMAIN"
          echo "‚Ä¢ Deployment URL: $DEPLOYMENT_URL"

          # Set outputs
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "custom-domain=$CUSTOM_DOMAIN" >> $GITHUB_OUTPUT
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

          echo "::endgroup::"

      - name: Setup Railway CLI
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-cli-setup@main
        with:
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Setup Project
        id: project
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-project-setup@main
        with:
          app-name: ${{ inputs.app-name }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Setup PR Service
        id: service
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-service-setup@main
        with:
          app-name: ${{ inputs.app-name }}
          environment: ${{ inputs.base-environment }}
          project-id: ${{ steps.project.outputs.project-id }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}
          service-name-override: ${{ steps.domain.outputs.service-name }}

      - name: Configure URL Variable
        shell: bash
        run: |
          echo "::group::üåê Configuring Site URL"

          SERVICE_NAME="${{ steps.domain.outputs.service-name }}"
          SITE_URL="${{ steps.domain.outputs.deployment-url }}"

          echo "‚Ä¢ Service: $SERVICE_NAME"
          echo "‚Ä¢ Site URL: $SITE_URL"

          railway variables --set "URL=${SITE_URL}" --service "$SERVICE_NAME" --skip-deploys

          echo "‚úÖ URL variable configured"

          echo "::endgroup::"
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          CI: true

      - name: Deploy Application
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-deploy-trigger@main
        with:
          service-name: ${{ steps.domain.outputs.service-name }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Wait for Deployment
        id: wait
        if: always()
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-deployment-wait@main
        with:
          service-name: ${{ steps.domain.outputs.service-name }}
          timeout-seconds: ${{ inputs.timeout-seconds }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Generate Railway URL
        id: url
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-url-generate@main
        with:
          service-name: ${{ steps.domain.outputs.service-name }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Configure Custom Domain
        uses: NextNodeSolutions/github-actions/actions/domain/railway-domain-setup@main
        with:
          service-name: ${{ steps.domain.outputs.service-name }}
          custom-domain: ${{ steps.domain.outputs.custom-domain }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}
          remove-existing: true

      - name: Comment PR with Deployment Info
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.domain.outputs.deployment-url }}';
            const serviceName = '${{ steps.domain.outputs.service-name }}';
            const railwayUrl = '${{ steps.url.outputs.railway-url }}';
            const status = '${{ steps.wait.outputs.status }}';
            const prNumber = ${{ github.event.pull_request.number }};
            const runQuality = ${{ inputs.run-quality-checks }};
            const baseEnv = '${{ inputs.base-environment }}';

            // Calculate deployment duration
            const jobStart = new Date('${{ github.event.pull_request.updated_at }}');
            const now = new Date();
            const durationMinutes = Math.floor((now - jobStart) / 1000 / 60);
            const durationSeconds = Math.floor((now - jobStart) / 1000 % 60);
            const durationStr = `${durationMinutes}m ${durationSeconds}s`;

            let qualityChecks = '';
            if (runQuality) {
              qualityChecks = `
            ‚úÖ Lint passed
            ‚úÖ Typecheck passed`;
            }

            const comment = `## üöÄ PR Preview Deployment ${status === 'SUCCESS' ? 'Ready!' : 'Status'}

            üìç **Preview URL:** ${deploymentUrl}
            üîß **Service:** \`${serviceName}\`
            üåç **Environment:** ${baseEnv}
            üìä **Status:** ${status}
            ‚è±Ô∏è **Deployed in:** ${durationStr}${qualityChecks}

            ---
            <details>
            <summary>üîç Railway Details</summary>

            - **Railway URL:** ${railwayUrl}
            - **PR Number:** #${prNumber}
            - **Memory:** ${{ inputs.memory-mb }}MB

            </details>

            > Preview deployments are automatically updated on each commit and cleaned up when the PR is closed.
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üöÄ PR Preview Deployment')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

      - name: Health Check
        if: steps.wait.outputs.status == 'SUCCESS'
        uses: NextNodeSolutions/github-actions/actions/health-check@main
        with:
          url: ${{ steps.domain.outputs.deployment-url }}
          max-attempts: 10
          retry-delay: 30
          expected-status: '200'
        continue-on-error: true

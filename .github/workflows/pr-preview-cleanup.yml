name: Railway PR Preview Cleanup

# EXTERNAL WORKFLOW - Cleanup PR preview deployments when PR is closed
# Removes the Railway service, custom domain, and DNS records

on:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name for Railway project'
        required: true
        type: string
    secrets:
      RAILWAY_API_TOKEN:
        required: true
      CLOUDFLARE_API_TOKEN:
        required: false
      CLOUDFLARE_ZONE_ID:
        required: false

jobs:
  cleanup-preview:
    name: Cleanup PR Preview
    runs-on: ubuntu-latest
    # Continue even if cleanup fails - don't block PR closure
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cleanup PR Preview Service
        id: cleanup
        uses: NextNodeSolutions/github-actions/actions/deploy/railway-pr-cleanup@main
        with:
          app-name: ${{ inputs.app-name }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}
          pr-number: ${{ github.event.pull_request.number }}

      - name: Comment PR with Cleanup Status
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cleaned = '${{ steps.cleanup.outputs.cleaned }}';
            const serviceName = '${{ steps.cleanup.outputs.service-name }}';
            const prNumber = ${{ github.event.pull_request.number }};

            let comment;
            if (cleaned === 'true') {
              comment = `## üßπ PR Preview Cleanup Complete

              ‚úÖ **Service Removed:** \`${serviceName}\`
              üåç **Environment:** development
              ‚è±Ô∏è **Cleaned at:** ${new Date().toISOString()}

              ---
              The preview deployment has been successfully removed from Railway.
              `;
            } else {
              comment = `## ‚ö†Ô∏è PR Preview Cleanup Notification

              **Service:** \`${serviceName}\`
              **Status:** Could not cleanup or already cleaned

              ---
              The preview deployment may have already been removed or never existed.
              If you see orphaned resources, please check Railway manually.
              `;
            }

            // Find and update existing preview comment or create new cleanup comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üöÄ PR Preview Deployment')
            );

            if (botComment) {
              // Update existing preview comment with cleanup status
              const updatedBody = botComment.body + '\n\n' + comment;
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: updatedBody,
              });
            } else {
              // Create new cleanup comment if preview comment not found
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

  cleanup-dns:
    name: Cleanup DNS Records
    runs-on: ubuntu-latest
    needs: [cleanup-preview]
    if: always()
    continue-on-error: true
    outputs:
      records-deleted: ${{ steps.dns-cleanup.outputs.records-deleted }}
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: NextNodeSolutions/github-actions
          token: ${{ github.token }}
          path: .github-actions

      - name: Setup Railway CLI
        uses: ./.github-actions/actions/deploy/railway-cli-setup
        with:
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Get Service Info from Railway
        id: service-info
        uses: ./.github-actions/actions/utilities/railway-service-info
        with:
          pr-number: ${{ github.event.pull_request.number }}
          app-name: ${{ inputs.app-name }}
          railway-token: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Cleanup DNS Records
        id: dns-cleanup
        if: ${{ secrets.CLOUDFLARE_API_TOKEN != '' && steps.service-info.outputs.custom-domain != '' }}
        uses: ./.github-actions/actions/domain/cloudflare-dns-cleanup
        with:
          domain: ${{ steps.service-info.outputs.custom-domain }}
          cloudflare-api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare-zone-id: ${{ secrets.CLOUDFLARE_ZONE_ID }}

      - name: Update PR Comment with DNS Cleanup Status
        uses: actions/github-script@v7
        if: always() && steps.dns-cleanup.outcome != 'skipped'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const recordsDeleted = '${{ steps.dns-cleanup.outputs.records-deleted || '0' }}';
            const success = '${{ steps.dns-cleanup.outputs.success }}';
            const prNumber = ${{ github.event.pull_request.number }};
            const domain = '${{ steps.service-info.outputs.custom-domain }}';

            let dnsComment;
            if (success === 'true' && recordsDeleted !== '0') {
              dnsComment = `\n\nüåê **DNS Cleanup:** ${recordsDeleted} Cloudflare DNS record(s) deleted for \`${domain}\``;
            } else if (success === 'true' && recordsDeleted === '0') {
              dnsComment = `\n\nüåê **DNS Cleanup:** No DNS records found (already cleaned or never created)`;
            } else {
              dnsComment = `\n\n‚ö†Ô∏è **DNS Cleanup:** Failed or skipped (check workflow logs)`;
            }

            // Find existing cleanup comment and append DNS status
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('üßπ PR Preview Cleanup') || comment.body.includes('‚ö†Ô∏è PR Preview Cleanup'))
            );

            if (botComment) {
              const updatedBody = botComment.body + dnsComment;
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: updatedBody,
              });
            }

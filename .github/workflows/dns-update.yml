name: DNS Update

# EXTERNAL WORKFLOW - DNS update orchestrator
# Delegates to specific DNS provider workflows

on:
  workflow_call:
    inputs:
      domain:
        description: 'Custom domain to configure'
        required: true
        type: string
      target:
        description: 'Target URL or IP address'
        required: true
        type: string
      record-type:
        description: 'DNS record type (A, CNAME, etc.)'
        required: false
        default: 'CNAME'
        type: string
      proxied:
        description: 'Enable Cloudflare proxy'
        required: false
        default: true
        type: boolean
      ttl:
        description: 'DNS TTL in seconds (1 = automatic)'
        required: false
        default: '1'
        type: string
      wait-seconds:
        description: 'Seconds to wait for DNS propagation'
        required: false
        default: '30'
        type: string
    secrets:
      CLOUDFLARE_API_TOKEN:
        required: true
      CLOUDFLARE_ZONE_ID:
        required: false
    outputs:
      dns-updated:
        description: 'Whether DNS was successfully updated'
        value: ${{ jobs.cloudflare.outputs.dns-updated }}
      record-id:
        description: 'DNS record ID'
        value: ${{ jobs.cloudflare.outputs.record-id }}

jobs:
  cloudflare:
    name: Update Cloudflare DNS
    uses: ./.github/workflows/dns-cloudflare.yml
    with:
      domain: ${{ inputs.domain }}
      target: ${{ inputs.target }}
      record-type: ${{ inputs.record-type }}
      proxied: ${{ inputs.proxied }}
      ttl: ${{ inputs.ttl }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      
  wait:
    name: Wait for Propagation
    needs: cloudflare
    if: needs.cloudflare.outputs.dns-updated == 'true' && inputs.wait-seconds != '0'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for DNS propagation
        run: |
          echo "Waiting ${{ inputs.wait-seconds }} seconds for DNS propagation..."
          sleep ${{ inputs.wait-seconds }}
          
      - name: Verify DNS resolution
        run: |
          echo "Testing DNS resolution for ${{ inputs.domain }}"
          nslookup ${{ inputs.domain }} 8.8.8.8 || true
          dig +short ${{ inputs.domain }} || true
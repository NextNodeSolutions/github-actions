name: Test GitHub Actions

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-setup-actions:
    name: Test Setup Actions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Test setup-environment action
        uses: ./actions/setup-environment
        with:
          node-version: '20'
          pnpm-version: '10.11.0'
          install-deps: 'false'
          enable-cache: 'false'
          
      - name: Verify Node.js version
        run: |
          NODE_VERSION=$(node --version)
          echo "Node.js version: $NODE_VERSION"
          [[ "$NODE_VERSION" == *"v20"* ]] || exit 1
          
      - name: Verify pnpm version
        run: |
          PNPM_VERSION=$(pnpm --version)
          echo "pnpm version: $PNPM_VERSION"
          [[ "$PNPM_VERSION" == "10.11.0" ]] || exit 1
          
  test-individual-workflows:
    name: Test Individual Workflows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create test project
        run: |
          mkdir -p test-project
          cd test-project
          
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "test-project",
            "version": "1.0.0",
            "scripts": {
              "lint": "echo 'Running lint...' && exit 0",
              "type-check": "echo 'Running type check...' && exit 0",
              "test": "echo 'Running tests...' && exit 0",
              "test:coverage": "echo 'Running tests with coverage...' && exit 0",
              "build": "echo 'Building project...' && mkdir -p dist && echo 'build output' > dist/index.js"
            },
            "devDependencies": {}
          }
          EOF
          
          # Create pnpm-lock.yaml
          echo "lockfileVersion: '9.0'" > pnpm-lock.yaml
          echo "dependencies: {}" >> pnpm-lock.yaml
          echo "devDependencies: {}" >> pnpm-lock.yaml
          echo "packages: {}" >> pnpm-lock.yaml
          
          # Create Dockerfile for security test
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
          USER nodejs
          WORKDIR /app
          COPY --chown=nodejs:nodejs . .
          CMD ["node", "index.js"]
          EOF
          
  validate-yaml:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate workflow files
        run: |
          echo "Validating YAML syntax..."
          find . -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking: $file"
            python3 -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done
          echo "All YAML files are valid!"
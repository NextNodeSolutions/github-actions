name: Deploy to Fly.io

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (development/production)'
        required: true
        type: string
      app-name:
        description: 'Fly.io app name'
        required: true
        type: string
      fly-org:
        description: 'Fly.io organization'
        required: true
        type: string
      fly-config:
        description: 'Fly.toml config file path'
        required: false
        default: 'fly.toml'
        type: string
      health-check-url:
        description: 'URL for health check'
        required: false
        default: ''
        type: string
      strategy:
        description: 'Deployment strategy'
        required: false
        default: 'rolling'
        type: string
      min-machines:
        description: 'Minimum machines for production'
        required: false
        default: '1'
        type: string
      memory-mb:
        description: 'Memory allocation in MB'
        required: false
        default: '512'
        type: string
      checkout-ref:
        description: 'Git ref to checkout'
        required: false
        default: ''
        type: string
    secrets:
      FLY_API_TOKEN:
        required: true
    outputs:
      fly-url:
        description: 'Deployed application URL'
        value: ${{ jobs.deploy.outputs.fly-url }}
      deployed:
        description: 'Deployment status'
        value: ${{ jobs.deploy.outputs.deployed }}

jobs:
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      fly-url: ${{ steps.deploy-info.outputs.fly-url }}
      deployed: ${{ steps.deploy-info.outputs.deployed }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout-ref || github.ref }}
          
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Create app if needed
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if ! flyctl apps list | grep -q "${{ inputs.app-name }}"; then
            flyctl apps create ${{ inputs.app-name }} --org "${{ inputs.fly-org }}"
          fi
          
      - name: Allocate IPs
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if ! flyctl ips list --app ${{ inputs.app-name }} 2>/dev/null | grep -q "v4"; then
            flyctl ips allocate-v4 --app ${{ inputs.app-name }} --yes
          fi
          if ! flyctl ips list --app ${{ inputs.app-name }} 2>/dev/null | grep -q "v6"; then
            flyctl ips allocate-v6 --app ${{ inputs.app-name }}
          fi
          
      - name: Deploy application
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Create temp config file
          TEMP_CONFIG="fly.${{ inputs.environment }}.toml"
          cp ${{ inputs.fly-config }} $TEMP_CONFIG
          
          # Update config with environment-specific settings
          sed -i "s/app = .*/app = \"${{ inputs.app-name }}\"/" $TEMP_CONFIG
          
          if [ "${{ inputs.environment }}" == "production" ]; then
            sed -i "s/min_machines_running = .*/min_machines_running = ${{ inputs.min-machines }}/" $TEMP_CONFIG
            sed -i "s/memory_mb = .*/memory_mb = ${{ inputs.memory-mb }}/" $TEMP_CONFIG
          fi
          
          # Deploy with appropriate strategy
          if [ "${{ inputs.strategy }}" == "bluegreen" ]; then
            flyctl deploy --config $TEMP_CONFIG --wait-timeout=15m --strategy=bluegreen
          else
            flyctl deploy --config $TEMP_CONFIG --wait-timeout=10m
          fi
          
          rm $TEMP_CONFIG
          
      - name: Health check
        run: |
          sleep 30
          URL="${{ inputs.health-check-url }}"
          if [ -z "$URL" ]; then
            URL="https://${{ inputs.app-name }}.fly.dev"
          fi
          
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f -s --max-time 30 "$URL" > /dev/null; then
              echo "Health check passed"
              break
            elif [ $i -eq $MAX_RETRIES ]; then
              echo "Health check failed after $MAX_RETRIES attempts"
              if [ "${{ inputs.environment }}" == "production" ]; then
                # Rollback on production failure
                PREV=$(flyctl releases --app ${{ inputs.app-name }} --json | jq -r '.[1].version')
                if [ "$PREV" != "null" ]; then
                  echo "Rolling back to version $PREV"
                  flyctl releases rollback $PREV --app ${{ inputs.app-name }}
                fi
              fi
              exit 1
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done
          
      - name: Set deployment info
        id: deploy-info
        run: |
          echo "fly-url=https://${{ inputs.app-name }}.fly.dev" >> $GITHUB_OUTPUT
          echo "deployed=true" >> $GITHUB_OUTPUT